services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file:
      - ./api/.env
    # If you have a requirements.txt for the api, uncomment the next line
    # command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    # volumes:
    #   - ./api:/app # Mount the api directory for hot-reloading (development)
    expose:
      - "8000"
    depends_on:
      - db # API depends on the database
    networks:
      - isle-network

  site:
    build:
      context: ./site
      dockerfile: Dockerfile
    env_file:
      - ./site/.env
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    volumes:
      - ./site:/app
    networks:
      - isle-network

  ml:
    build:
      context: ./ml
      dockerfile: Dockerfile
    env_file:
      - ./ml/.env
    # command: python main.py # Command to run the ML WebSocket server
    volumes:
      - ./ml:/app # Mount the ml directory (useful if you want to update models without rebuilding)
      # Ensure your models are copied to ml/models_store on the host
      # Or, manage models as part of the Docker image build process
    expose:
      - "15100"
    networks:
      - isle-network

  db:
    image: postgres:17-bookworm
    env_file:
      - ./api/.env
    volumes:
      - pgdata:/var/lib/postgresql/data # Persist data
    networks:
      - isle-network
    # No ports exposed to the host by default.
    # If you need to access the DB from your host machine during development, uncomment and use:
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy
      site:
        condition: service_started
      ml:
        condition: service_started
      db:
        condition: service_healthy
    networks:
      - isle-network

volumes: # Define the named volume for data persistence
  pgdata:

networks:
  isle-network:
    driver: bridge 